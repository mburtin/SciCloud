name: E2E Tests
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 10.15.0
        run_install: false

    - uses: actions/setup-node@v4
      with:
        node-version: lts/*
        cache: pnpm
        cache-dependency-path: pnpm-lock.yaml

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Setup Supabase CLI
      uses: supabase/setup-cli@v1
      with:
        version: latest

    - name: Start Supabase services
      run: |
        cd apps/supabase
        supabase start
      
    - name: Wait for Supabase services
      run: |
        echo "Waiting for Supabase services to be ready..."
        sleep 10
        cd apps/supabase
        supabase status

    - name: Start Supabase Edge Functions
      run: |
        cd apps/supabase
        if [ -f .env.local ]; then
          supabase functions serve --env-file .env.local &
        else
          supabase functions serve &
        fi
        EDGE_FUNCTIONS_PID=$!
        echo $EDGE_FUNCTIONS_PID > ../../edge_functions.pid
        sleep 5
        echo "Edge Functions started (PID: $EDGE_FUNCTIONS_PID)"

    - name: Set Supabase environment variables
      run: |
        cd apps/supabase
        SUPABASE_STATUS=$(supabase status)
        echo "Raw status output:"
        echo "$SUPABASE_STATUS"
        
        # Extract API URL (looking for "API URL: http://...")
        API_URL=$(echo "$SUPABASE_STATUS" | grep "API URL:" | awk '{print $3}')
        
        # Extract anon key (looking for "anon key: ...")
        ANON_KEY=$(echo "$SUPABASE_STATUS" | grep "anon key:" | awk '{print $3}')
        
        echo "VITE_SUPABASE_URL=$API_URL" >> $GITHUB_ENV
        echo "VITE_SUPABASE_ANON_KEY=$ANON_KEY" >> $GITHUB_ENV
        echo "Environment variables set:"
        echo "  URL: $API_URL"
        echo "  ANON_KEY: ${ANON_KEY:0:20}..."

    - name: Start web application
      run: |
        cd apps/web
        echo "Starting web application with environment:"
        echo "VITE_SUPABASE_URL=$VITE_SUPABASE_URL"
        echo "VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY:0:20}..."
        
        # Validate that environment variables are set
        if [ -z "$VITE_SUPABASE_URL" ] || [ "$VITE_SUPABASE_URL" = "null" ]; then
          echo "ERROR: VITE_SUPABASE_URL is not set or null"
          exit 1
        fi
        if [ -z "$VITE_SUPABASE_ANON_KEY" ] || [ "$VITE_SUPABASE_ANON_KEY" = "null" ]; then
          echo "ERROR: VITE_SUPABASE_ANON_KEY is not set or null"
          exit 1
        fi
        
        # Start web server in a new process group for better cleanup
        setsid pnpm dev &
        WEB_PID=$!
        echo $WEB_PID > ../../web_server.pid
        echo "Web server starting in background (PID: $WEB_PID)..."
        
    - name: Wait for web server
      run: |
        echo "Waiting for web server to be ready..."
        echo "Environment check:"
        echo "VITE_SUPABASE_URL=$VITE_SUPABASE_URL"
        echo "VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY:0:20}..."
        timeout 60 bash -c 'until curl -s http://localhost:3000 > /dev/null; do sleep 2; done'
        echo "Web server is ready!"

    - name: Install Playwright Browsers
      run: pnpm --filter @scicloud/tests exec playwright install --with-deps

    - name: Run Playwright tests
      run: pnpm test:e2e

    - name: Debug on failure
      if: failure()
      run: |
        echo "=== Debug Information ==="
        echo "Checking running processes:"
        ps aux | grep -E "(node|vite|supabase)" || true
        echo "Checking port 3000:"
        curl -v http://localhost:3000 || true
        echo "Supabase status:"
        cd apps/supabase && supabase status || true
        echo "Recent logs:"
        tail -50 ~/.supabase/logs/api.log || true

    - name: Cleanup processes
      if: always()
      run: |
        echo "Cleaning up background processes..."
        
        # Kill web server and its child processes
        if [ -f web_server.pid ]; then
          WEB_PID=$(cat web_server.pid)
          echo "Killing web server (PID: $WEB_PID) and children..."
          # Kill the process group to ensure all child processes are terminated
          kill -TERM -$WEB_PID 2>/dev/null || true
          sleep 2
          kill -KILL -$WEB_PID 2>/dev/null || true
          rm -f web_server.pid
        fi
        
        # Kill Edge Functions and its child processes
        if [ -f edge_functions.pid ]; then
          EDGE_PID=$(cat edge_functions.pid)
          echo "Killing Edge Functions (PID: $EDGE_PID) and children..."
          kill -TERM -$EDGE_PID 2>/dev/null || true
          sleep 2
          kill -KILL -$EDGE_PID 2>/dev/null || true
          rm -f edge_functions.pid
        fi
        
        # Additional cleanup for any remaining processes
        echo "Cleaning up any remaining processes..."
        pkill -f "vite" || true
        pkill -f "supabase functions serve" || true
        pkill -f "deno" || true
        
        # Stop Supabase services
        echo "Stopping Supabase services..."
        cd apps/supabase && supabase stop || true

    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

    - uses: actions/upload-artifact@v4
      if: ${{ !cancelled() }}
      with:
        name: test-results
        path: test-results/
        retention-days: 30
